I"H(<h2 id="前端技术相关">前端技术相关</h2>

<h3 id="vue双向绑定原理">vue双向绑定原理</h3>
<ul>
  <li>所谓的双向绑定建立在MVVM模型基础上的：</li>
  <li>数据层 model: 应用的数据以及业务逻辑</li>
  <li>视图层 view: 应用的展示效果，各类的UI组件等</li>
  <li>业务逻辑层 viewmodel:负责将数据和视图关联起来</li>
</ul>

<p>所谓双向绑定：</p>
<ul>
  <li>数据变化后更新视图</li>
  <li>视图变化后更新数据</li>
</ul>

<p>包含两个主要的组成部分</p>
<ul>
  <li>监听器 observer: 对所有的数据属性进行监听</li>
  <li>解析器 compiler: 对每个元素节点的指令进行扫描和解析，根据指令替换数据，绑定对应的更新函数</li>
</ul>

<p>### 具体的实现原理</p>
<ul>
  <li>new Vue()执行初始化，对data通过Object.defineProperty进行响应化处理，这个过程发生在observer中，每一个key都要一个dep实例来存储watcher实例数组</li>
  <li>对模版进行编译时，v-开头的关键词作为指令解析，找到动态棒的的数据，从data中获取数据并初始化视图，这个过程发生在compiler里，如果遇到了v-model，就监听input 事件，更新data对应的数值</li>
  <li>在解析指令的过程中，会定义一个更新函数和watcher，之后对应的数据变化时watcher会调用更新函数，new watcher的过程中会去读data的key，触发getter的依赖收集，将对应的watcher添加到dep里</li>
  <li>将来data中的数据一旦发生改变，会首先找到对应的dep,通知所有的watcher执行更新函数</li>
</ul>

<p>### 代码</p>
<ul>
  <li>实现一个响应式函数？能对一个对象内的所有key添加响应式特性？要求输出如下代码</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
 <span class="kd">const</span> <span class="nx">logInfo</span> <span class="o">=</span> <span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
     <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="s2">`SET key=</span><span class="p">${</span><span class="nx">key</span><span class="p">}</span><span class="s2"> val=</span><span class="p">${</span><span class="nx">val</span><span class="p">}</span><span class="s2">`</span><span class="p">);</span>
 <span class="p">}</span>

 <span class="kd">const</span> <span class="nx">resetProperty</span> <span class="o">=</span> <span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">val</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
     <span class="nx">reactive</span><span class="p">(</span><span class="nx">val</span><span class="p">);</span>
     
     <span class="nb">Object</span><span class="p">.</span><span class="nx">defineProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="p">{</span>
         <span class="kd">get</span><span class="p">()</span> <span class="p">{</span>
             <span class="k">return</span> <span class="nx">val</span><span class="p">;</span>
         <span class="p">},</span>
         <span class="kd">set</span><span class="p">(</span><span class="nx">newVal</span><span class="p">)</span> <span class="p">{</span>
             <span class="k">if</span><span class="p">(</span><span class="nx">newVal</span> <span class="o">===</span> <span class="nx">val</span><span class="p">)</span> <span class="p">{</span>
                <span class="k">return</span><span class="p">;</span>
             <span class="p">}</span>
             <span class="nx">logInfo</span><span class="p">(</span><span class="nx">key</span><span class="p">,</span> <span class="nx">newVal</span><span class="p">);</span>
             <span class="nx">val</span> <span class="o">=</span> <span class="nx">newVal</span><span class="p">;</span>
         <span class="p">},</span>
     <span class="p">})</span>
 <span class="p">}</span>
 <span class="kd">const</span> <span class="nx">reactive</span> <span class="o">=</span> <span class="nx">obj</span> <span class="o">=&gt;</span> <span class="p">{</span>
     <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">obj</span> <span class="o">===</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">for</span><span class="p">(</span><span class="kd">let</span> <span class="nx">key</span> <span class="k">in</span> <span class="nx">obj</span><span class="p">)</span> <span class="p">{</span>
             <span class="nx">resetProperty</span><span class="p">(</span><span class="nx">obj</span><span class="p">,</span> <span class="nx">key</span><span class="p">,</span> <span class="nx">obj</span><span class="p">[</span><span class="nx">key</span><span class="p">]);</span>
         <span class="p">}</span>
     <span class="p">}</span>
 <span class="p">}</span>

 <span class="kd">const</span> <span class="nx">data</span> <span class="o">=</span> <span class="p">{</span>
     <span class="na">a</span><span class="p">:</span> <span class="mi">1</span><span class="p">,</span>
     <span class="na">b</span><span class="p">:</span><span class="mi">2</span><span class="p">,</span>
     <span class="na">c</span><span class="p">:</span> <span class="p">{</span>
         <span class="na">c1</span><span class="p">:</span> <span class="p">{</span>
             <span class="na">a11</span><span class="p">:</span> <span class="mi">222</span><span class="p">,</span>
         <span class="p">},</span>
         <span class="na">c2</span><span class="p">:</span> <span class="mi">4</span><span class="p">,</span>
     <span class="p">}</span>
 <span class="p">}</span>
 <span class="nx">reactive</span><span class="p">(</span><span class="nx">data</span><span class="p">);</span>
 <span class="nx">data</span><span class="p">.</span><span class="nx">a</span> <span class="o">=</span> <span class="mi">5</span> <span class="c1">// SET key=a val=5</span>
 <span class="nx">data</span><span class="p">.</span><span class="nx">b</span> <span class="o">=</span> <span class="mi">7</span> <span class="c1">// SET key=b val=7</span>
 <span class="nx">data</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nx">c2</span> <span class="o">=</span> <span class="mi">4</span>
 <span class="nx">data</span><span class="p">.</span><span class="nx">c</span><span class="p">.</span><span class="nx">c1</span><span class="p">.</span><span class="nx">a11</span> <span class="o">=</span> <span class="mi">1111</span>
</code></pre></div></div>

<p>### 你了解虚拟dom吗？能说一下他的优缺点吗？</p>

<ul>
  <li>
    <p>对于真实DOM 的抽象，能嵌套对象表示，用属性来描述节点，最终通过一系列的操作映射到真实dom上</p>
  </li>
  <li>优点
    <ul>
      <li>
        <ol>
          <li>保证性能的下限，在不进行手动优化的前提下，也能提供过得去的性能</li>
        </ol>
      </li>
      <li>
        <ol>
          <li>无需手动操作DOM</li>
        </ol>
      </li>
      <li>
        <ol>
          <li>跨平台</li>
        </ol>
      </li>
    </ul>
  </li>
  <li>缺点
    <ul>
      <li>首次渲染大量dom的时候，由于多了一层虚拟dom的计算，会比innerHtml的插入速度慢</li>
      <li>做一些针对性的优化的时候，真实dom的操作还是更快一些</li>
    </ul>
  </li>
</ul>

<h3 id="symbol">Symbol</h3>
<ul>
  <li>用来解决属性名冲突的问题，构造唯一的属性名或者变量</li>
  <li>私有属性</li>
</ul>

<h4 id="jsonstringfy-会忽略symbol除了这个还会忽略什么呢">JSON.stringfy 会忽略Symbol?除了这个还会忽略什么呢？</h4>

<ul>
  <li>
    <p>undefined function</p>
  </li>
  <li>如果对象有循环引用，可以用JSON.stringfy来处理吗？</li>
  <li>会报错</li>
</ul>

<p>### 平时如何判断对象类型，分别适合哪些场景？</p>

<ul>
  <li>typeof</li>
  <li>instanceof</li>
  <li>Object.prototype.toString.call(obj);</li>
  <li>Array.isArray</li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
 <span class="nx">functions</span> <span class="k">instanceof</span><span class="p">(</span><span class="nx">left</span><span class="p">,</span> <span class="nx">right</span><span class="p">)</span> <span class="p">{</span>
     <span class="k">if</span><span class="p">(</span><span class="k">typeof</span> <span class="nx">left</span> <span class="o">!==</span> <span class="dl">'</span><span class="s1">object</span><span class="dl">'</span> <span class="o">||</span> <span class="nx">left</span> <span class="o">===</span> <span class="kc">null</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
     <span class="p">}</span>

     <span class="k">while</span><span class="p">(</span><span class="nx">left</span><span class="p">)</span> <span class="p">{</span>
         <span class="k">if</span><span class="p">(</span><span class="nx">left</span><span class="p">.</span><span class="nx">__proto__</span> <span class="o">===</span> <span class="nx">right</span><span class="p">.</span><span class="nx">prototype</span><span class="p">)</span> <span class="p">{</span>
             <span class="k">return</span> <span class="kc">true</span><span class="p">;</span>
         <span class="p">}</span>
         <span class="nx">left</span> <span class="o">=</span> <span class="nx">left</span><span class="p">.</span><span class="nx">__proto__</span><span class="p">;</span>
     <span class="p">}</span>

     <span class="k">return</span> <span class="kc">false</span><span class="p">;</span>
 <span class="p">}</span>
</code></pre></div></div>
:ET