I"%=<h2 id="你了解闭包你平常用闭包的场景有哪些">你了解闭包？你平常用闭包的场景有哪些？</h2>

<h2 id="闭包的定义">闭包的定义？</h2>
<ul>
  <li>
    <p>闭包是指那些能够访问自由变量的函数</p>
  </li>
  <li>
    <p>自由变量是指函数中使用的，但即不是函数参数也不是函数局部变量的变量</p>
  </li>
  <li>
    <ol>
      <li>从理论角度：所有的函数都有可能是闭包，函数中去访问全局变量就相当于是在访问自由变量</li>
    </ol>
  </li>
  <li>
    <ol>
      <li>从实践角度：
        <ul>
          <li>2.1 即使创建它的上下文已经被销毁了，他仍然存在，（内部函数从父函数中返回）</li>
          <li>2.2 代码引用了自由变量</li>
        </ul>
      </li>
    </ol>
  </li>
</ul>

<h3 id="应用场景">应用场景</h3>
<ul>
  <li>
    <ol>
      <li>柯里化函数
避免频繁调用具有相同参数的函数，同时能够轻松的复用
其实就是封装一个高阶函数</li>
    </ol>
  </li>
</ul>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">getArea</span><span class="p">(</span><span class="nx">width</span><span class="p">,</span> <span class="nx">height</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">width</span> <span class="o">*</span> <span class="nx">height</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">area1</span> <span class="o">=</span> <span class="nx">getArea</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">29</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">area2</span> <span class="o">=</span> <span class="nx">getArea</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">20</span><span class="p">);</span>
<span class="c1">// 第一个参数保持不变，可以用柯里化函数</span>

<span class="kd">function</span> <span class="nx">getArea</span><span class="p">(</span><span class="nx">width</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">height</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">return</span> <span class="nx">width</span> <span class="o">*</span> <span class="nx">height</span><span class="p">;</span>
    <span class="p">}</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">getTenWidthArea</span> <span class="o">=</span> <span class="nx">getArea</span><span class="p">(</span><span class="mi">10</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">area1</span> <span class="o">=</span> <span class="nx">getTenWidthArea</span><span class="p">(</span><span class="mi">29</span><span class="p">);</span>
</code></pre></div></div>

<ul>
  <li>
    <ol>
      <li>使用闭包实现私有方法/变量</li>
    </ol>
  </li>
  <li>模块</li>
  <li>
    <p>现代化的打包方式，最终就是每个模块的代码都是相互独立的</p>
  </li>
  <li>
    <ol>
      <li>匿名的自执行函数
        <div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">var</span> <span class="nx">fnOne</span> <span class="o">=</span> <span class="p">(</span><span class="nx">fuction</span><span class="p">()</span> <span class="p">{</span>
  <span class="kd">var</span> <span class="nx">num</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
  <span class="k">return</span> <span class="kd">function</span><span class="p">()</span> <span class="p">{</span>
   <span class="nx">num</span><span class="o">++</span><span class="p">;</span>
   <span class="k">return</span> <span class="nx">num</span><span class="p">;</span>
  <span class="p">}</span>
<span class="p">})();</span>
</code></pre></div>        </div>
      </li>
    </ol>
  </li>
  <li>
    <ol>
      <li>缓存一些结果</li>
    </ol>
  </li>
</ul>

<p>外部函数中创建一个数组，闭包函数可以获取或者修改这个数组的值，延长了变量的生命周期</p>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kd">function</span> <span class="nx">funParent</span><span class="p">()</span> <span class="p">{</span>
    <span class="kd">let</span> <span class="nx">meno</span> <span class="o">=</span> <span class="p">[];</span>

    <span class="kd">function</span> <span class="nx">funOne</span><span class="p">(</span><span class="nx">i</span><span class="p">)</span> <span class="p">{</span>
        <span class="nx">meno</span><span class="p">.</span><span class="nx">push</span><span class="p">(</span><span class="nx">i</span><span class="p">);</span>
        <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">meno</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">funOne</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div></div>

<h2 id="总结">总结</h2>
<ul>
  <li>创建自由变量</li>
  <li>延长变量的生命周期</li>
</ul>

<h3 id="代码题">代码题</h3>
<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 实现一个compose函数，用法如下：</span>
<span class="kd">function</span> <span class="nx">fn1</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">1</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">fn2</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">2</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">fn3</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">3</span><span class="p">;</span>
<span class="p">}</span>
<span class="kd">function</span> <span class="nx">fn4</span><span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="p">{</span>
    <span class="k">return</span> <span class="nx">x</span> <span class="o">+</span> <span class="mi">4</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">a1</span> <span class="o">=</span> <span class="nx">compose</span><span class="p">(</span><span class="nx">fn1</span><span class="p">,</span> <span class="nx">fn2</span><span class="p">,</span> <span class="nx">fn3</span><span class="p">,</span> <span class="nx">fn4</span><span class="p">);</span>
<span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="nx">a1</span><span class="p">(</span><span class="mi">1</span><span class="p">));</span> <span class="c1">// 1+2+3+4+1 = 11</span>

<span class="c1">// 解答</span>
<span class="kd">function</span> <span class="nx">compose</span><span class="p">()</span> <span class="p">{</span>
 <span class="kd">const</span> <span class="nx">argsArr</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">arguments</span><span class="p">];</span>
 <span class="k">return</span> <span class="p">(</span><span class="nx">x</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
     <span class="k">return</span> <span class="nx">argsArr</span><span class="p">.</span><span class="nx">reduce</span><span class="p">((</span><span class="nx">pre</span><span class="p">,</span> <span class="nx">cur</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">cur</span><span class="p">(</span><span class="nx">pre</span><span class="p">),</span> <span class="nx">x</span><span class="p">);</span>
 <span class="p">}</span>
<span class="p">}</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1">// 柯里化</span>
<span class="kd">function</span> <span class="nx">currying</span><span class="p">(</span><span class="nx">fn</span><span class="p">,</span> <span class="p">...</span><span class="nx">args</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">originFnLength</span> <span class="o">=</span> <span class="nx">fn</span><span class="p">.</span><span class="nx">length</span><span class="p">;</span>
    <span class="kd">let</span> <span class="nx">allArgs</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">args</span><span class="p">];</span>
    <span class="kd">const</span> <span class="nx">resFn</span> <span class="o">=</span> <span class="p">(...</span><span class="nx">fnArgs</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="nx">allArgs</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">allArgs</span><span class="p">,</span> <span class="p">...</span><span class="nx">fnArgs</span><span class="p">];</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">originFnLength</span> <span class="o">===</span> <span class="nx">allArgs</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
           <span class="k">return</span> <span class="nx">fn</span><span class="p">(...</span><span class="nx">allArgs</span><span class="p">);</span>
        <span class="p">}</span> <span class="k">else</span> <span class="p">{</span>
            <span class="k">return</span> <span class="nx">resFn</span><span class="p">;</span>
        <span class="p">}</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">resFn</span><span class="p">;</span>
<span class="p">}</span>

<span class="kd">const</span> <span class="nx">add</span> <span class="o">=</span> <span class="p">(</span><span class="nx">a</span><span class="p">,</span> <span class="nx">b</span><span class="p">,</span> <span class="nx">c</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="nx">a</span><span class="o">+</span><span class="nx">b</span><span class="o">+</span><span class="nx">c</span><span class="p">;</span>

<span class="kd">const</span> <span class="nx">a1</span> <span class="o">=</span> <span class="nx">currying</span><span class="p">(</span><span class="nx">add</span><span class="p">,</span> <span class="mi">1</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">a2</span> <span class="o">=</span> <span class="nx">a1</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
<span class="kd">const</span> <span class="nx">a3</span> <span class="o">=</span> <span class="nx">a2</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
</code></pre></div></div>

<div class="language-js highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">/**
题目需求，实现koa compose
*/</span>
<span class="kd">let</span> <span class="nx">middleware</span> <span class="o">=</span> <span class="p">[];</span>
<span class="nx">middleware</span><span class="p">.</span><span class="nx">push</span><span class="p">((</span><span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">1</span><span class="p">);</span>
    <span class="nx">next</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mf">1.1</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">middleware</span><span class="p">.</span><span class="nx">push</span><span class="p">((</span><span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">2</span><span class="p">);</span>
    <span class="nx">next</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mf">2.1</span><span class="p">);</span>
<span class="p">});</span>
<span class="nx">middleware</span><span class="p">.</span><span class="nx">push</span><span class="p">((</span><span class="nx">next</span><span class="p">)</span> <span class="o">=&gt;</span> <span class="p">{</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mi">3</span><span class="p">);</span>
    <span class="nx">next</span><span class="p">();</span>
    <span class="nx">console</span><span class="p">.</span><span class="nx">log</span><span class="p">(</span><span class="mf">3.1</span><span class="p">);</span>
<span class="p">});</span>

<span class="kd">let</span> <span class="nx">fn</span> <span class="o">=</span> <span class="nx">compose</span><span class="p">(</span><span class="nx">middleware</span><span class="p">);</span>
<span class="nx">fn</span><span class="p">();</span> 

<span class="kd">function</span> <span class="nx">compose</span><span class="p">(</span><span class="nx">middleware</span><span class="p">)</span> <span class="p">{</span>
    <span class="kd">const</span> <span class="nx">copyMiddleware</span> <span class="o">=</span> <span class="p">[...</span><span class="nx">middleware</span><span class="p">];</span>
    <span class="kd">let</span> <span class="nx">index</span> <span class="o">=</span> <span class="mi">0</span><span class="p">;</span>
    <span class="kd">const</span> <span class="nx">fn</span> <span class="o">=</span> <span class="p">()</span> <span class="o">=&gt;</span> <span class="p">{</span>
        <span class="k">if</span><span class="p">(</span><span class="nx">index</span> <span class="o">&gt;=</span> <span class="nx">copyMiddleware</span><span class="p">.</span><span class="nx">length</span><span class="p">)</span> <span class="p">{</span>
            <span class="k">return</span><span class="p">;</span>
        <span class="p">}</span>
        <span class="kd">const</span> <span class="nx">curMiddleware</span> <span class="o">=</span> <span class="nx">copyMiddleware</span><span class="p">[</span><span class="nx">index</span><span class="p">];</span>
        <span class="nx">index</span><span class="o">++</span><span class="p">;</span>
        <span class="k">return</span> <span class="nx">curMiddleware</span><span class="p">(</span><span class="nx">fn</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="k">return</span> <span class="nx">fn</span><span class="p">;</span>
<span class="p">}</span>
<span class="cm">/*
1
2
3
3.1
2.1
1.2
</span></code></pre></div></div>
:ET